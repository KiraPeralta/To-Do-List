import tkinter as tk
from tkinter import ttk, messagebox
import mysql.connector

# Conexión a la base de datos
def obtener_conexion():
    return mysql.connector.connect(
        host='localhost',
        user='root',
        password='',
        database='usuariosdb'
    )

# Clase APP para crear la ventana de datos
class App(tk.Tk):
    #Iniciador de la clase  
    def __init__(self):
        super().__init__()
        self.title("CRUD Usuarios")
        #color de la ventana
        self.config(background="#F5A9D0")
        self.geometry("600x400")

        # Campos de entrada de datos y color

        ttk.Label(self, text="Nombre_de_la_tarea:", background="#F5A9D0").grid(row=0, column=0, padx=10, pady=5)
        self.txt_Nombre_de_la_tarea = ttk.Entry(self)
        self.txt_Nombre_de_la_tarea.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(self, text="Descripcion:",background="#F5A9D0").grid(row=1, column=0, padx=10, pady=5)
        self.txt_Descripcion = ttk.Entry(self)
        self.txt_Descripcion.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(self, text="Marcar_como_listo:",background="#F5A9D0").grid(row=2, column=0, padx=10, pady=5)
        self.txt_Marcar_como_listo = ttk.Entry(self)
        self.txt_Marcar_como_listo.grid(row=2, column=1, padx=10, pady=5)

        # Botones de la ventana y color

        ttk.Button(self, text="Agregar", command=self.agregar_usuario).grid(row=3, column=0, pady=10)
        #ttk.Button(self, text="Cargar", command=self.cargar_usuarios).grid(row=3, column=1, pady=10)
        ttk.Button(self, text="Eliminar", command=self.eliminar_usuario).grid(row=3, column=1, pady=10)
        ttk.Button(self, text="Modificar", command=self.modificar_usuario).grid(row=3, column=2, pady=10)



        # Se crea la tabla donde se mostrarán los datos
        columnas = ("Nombre_de_la_tarea", "Descripcion", "Marcar_como_listo_(si/no)")
        self.tabla = ttk.Treeview(self, columns=columnas, show="headings")
        for col in columnas:
            self.tabla.heading(col, text=col)
        self.tabla.grid(row=4, column=0, columnspan=4, pady=10)
        self.cargar_usuarios()

    def agregar_usuario(self):
        Nombre_de_la_tarea = self.txt_Nombre_de_la_tarea.get()
        Marcar_como_listo = self.txt_Marcar_como_listo.get()
        Descripcion = self.txt_Descripcion.get()

        if Nombre_de_la_tarea and Descripcion and Marcar_como_listo:
            try:
                conn = obtener_conexion()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO usuario (Nombre_de_la_tarea, Marcar_como_listo, Descripcion) VALUES (%s, %s, %s)", (Nombre_de_la_tarea, Marcar_como_listo, Descripcion))
                conn.commit()
                messagebox.showinfo("Éxito", "Usuario agregado correctamente.")
                self.cargar_usuarios()
                self.limpiar_campos()
            except mysql.connector.Error as e:
                messagebox.showerror("Error", f"Error al agregar usuario: {e}")
            finally:
                cursor.close()
                conn.close()
        else:
            messagebox.showwarning("Advertencia", "Todos los campos son obligatorios.")

    def cargar_usuarios(self):
        for row in self.tabla.get_children():
            self.tabla.delete(row)
        try:
            conn = obtener_conexion()
            cursor = conn.cursor()
            cursor.execute("SELECT Nombre_de_la_tarea, Descripcion, Marcar_como_listo FROM usuario")
            for usuario in cursor.fetchall():
                self.tabla.insert("", "end", values=usuario)
        except mysql.connector.Error as e:
            messagebox.showerror("Error", f"Error al cargar usuarios: {e}")
        finally:
            cursor.close()
            conn.close()

    def eliminar_usuario(self):
        selected_item = self.tabla.selection()
        if selected_item:
            id = self.tabla.item(selected_item[0], "values")[0]  # Se usa el Marcar_como_listo para eliminar
            try:
                conn = obtener_conexion()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM usuario WHERE Nombre_de_la_tarea = %s", (id,))
                conn.commit()
                messagebox.showinfo("Éxito", "Usuario eliminado correctamente.")
                self.cargar_usuarios()
            except mysql.connector.Error as e:
                messagebox.showerror("Error", f"Error al eliminar usuario: {e}")
            finally:
                cursor.close()
                conn.close()
        else:
            messagebox.showwarning("Advertencia", "Selecciona un usuario para eliminar.")

    def modificar_usuario(self):
        selected_item = self.tabla.selection()
        if selected_item:
            id = self.tabla.item(selected_item[0], "values")[0]
            Nombre_de_la_tarea = self.txt_Nombre_de_la_tarea.get()
            Marcar_como_listo2 = self.txt_Marcar_como_listo.get()
            Descripcion = self.txt_Descripcion.get()
            # Se asegura de que todos los campos estén completos
            if Nombre_de_la_tarea and Marcar_como_listo2 and Descripcion:
                try:
                    conn = obtener_conexion()
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE usuario SET Nombre_de_la_tarea = %s, Marcar_como_listo = %s, Descripcion = %s
                        WHERE Nombre_de_la_tarea = %s
                    """, (Nombre_de_la_tarea, Marcar_como_listo2,Descripcion, id))
                    conn.commit()
                    messagebox.showinfo("Éxito", "Usuario modificado correctamente.")
                    self.cargar_usuarios()
                    self.limpiar_campos()
                except mysql.connector.Error as e:
                    messagebox.showerror("Error", f"Error al modificar usuario: {e}")
                finally:
                    cursor.close()
                    conn.close()
            else:
                messagebox.showwarning("Advertencia", "Todos los campos son obligatorios.")
        else:
            messagebox.showwarning("Advertencia", "Selecciona un usuario para modificar.")

    def cargar_datos_seleccionados(self):
        selected_item = self.tabla.selection()
        if selected_item:
            Nombre_de_la_tarea, Marcar_como_listo, Descripcion = self.tabla.item(selected_item[0], "values")
            self.txt_Nombre_de_la_tarea.delete(0, tk.END)
            self.txt_Descripcion.delete(0, tk.END)
            self.txt_Marcar_como_listo.delete(0, tk.END)
            self.txt_Nombre_de_la_tarea.insert(0, Nombre_de_la_tarea)
            self.txt_Descripcion.insert(0, Descripcion)
            self.txt_Marcar_como_listo.insert(0, Marcar_como_listo)

    def limpiar_campos(self):
        self.txt_Nombre_de_la_tarea.delete(0, tk.END)
        self.txt_Descripcion.delete(0, tk.END)
        self.txt_Marcar_como_listo.delete(0, tk.END)

# Ejecución de la aplicación
if __name__ == "__main__":
    app = App()
    app.mainloop()
